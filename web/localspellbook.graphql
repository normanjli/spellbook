input CharObject {
  name: String!
  class: String!
  user: String!
}

type CharResponse {
  character: [Character!]
  errors: String
}

type Char_Spell {
  character: Float!
  createdAt: DateTime!
  id: Float!
  note: Float!
  spell_id: String!
  updatedAt: DateTime!
}

input Char_SpellObject {
  charId: Float!
  spellName: String!
}

type Char_SpellResponse {
  char_spell: [Char_Spell!]
  errors: String
}

type Character {
  charspell: Float!
  class: String!
  createdAt: DateTime!
  id: Float!
  name: String!
  updatedAt: DateTime!
  user: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Mutation {
  addChar(options: CharObject!): CharResponse
  addChar_Spell(options: Char_SpellObject!): Char_SpellResponse
  createNote(options: NoteObject!): NoteResponse
  deleteChar(charId: Float!): String
  deleteCharSpell(charSpellId: Float!): String
  deleteNote(noteId: Float!): String
  editChar(options: UpdateCharObject!): String
  register(options: UserObject!): UserResponse
}

type Note {
  char_spell: Float!
  createdAt: DateTime!
  id: Float!
  text: String!
  title: String!
  updatedAt: DateTime!
}

input NoteObject {
  char_spellId: Float!
  text: String!
  title: String!
}

type NoteResponse {
  errors: String
  note: [Note!]
}

type Query {
  getCharSpells(options: Float!): Char_SpellResponse
  me(email: String!): User
  myChars(email: String!): CharResponse
  myNotes(options: Float!): NoteResponse
}

input UpdateCharObject {
  charId: Float!
  name: String!
}

type User {
  character: [Float!]!
  createdAt: DateTime!
  email: String!
  name: String!
  updatedAt: DateTime!
}

input UserObject {
  email: String!
  name: String!
}

type UserResponse {
  errors: String
  user: User
}
