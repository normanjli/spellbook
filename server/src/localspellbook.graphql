type Query {
  hello: String!
  me: User
}

type User {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  email: String!
  character: [Character!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Character {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: Float!
  name: String!
  class: String!
}

type Mutation {
  register(options: UserObject!): UserResponse
}

type UserResponse {
  errors: String
  user: User
}

input UserObject {
  email: String!
  name: String!
}
